import {
  Component,
  Output,
  EventEmitter,
  inject,
  ChangeDetectorRef,
  NgZone,
  OnInit
} from '@angular/core';
import { FormsModule, NgForm } from '@angular/forms';
import { NgFor, NgIf, NgSwitch, NgSwitchCase, CommonModule } from '@angular/common';
import { RouterModule } from '@angular/router';
import { FooterComponent } from '../shared/footer/footer.component';
import { HttpClient } from '@angular/common/http';
import { LanguageService, SupportedLang } from '../shared/language.service';

@Component({
  selector: 'app-contact-me',
  standalone: true,
  imports: [
    FormsModule,
    NgFor,
    NgSwitch,
    NgSwitchCase,
    NgIf,
    RouterModule,
    FooterComponent,
    CommonModule,
  ],
  templateUrl: './contact-me.component.html',
  styleUrls: ['./contact-me.component.scss'],
})
export class ContactMeComponent implements OnInit {
  http = inject(HttpClient);
  @Output() scrollToTop = new EventEmitter<void>();

  currentLang: SupportedLang = 'de';

  contactData = {
    name: '',
    email: '',
    message: '',
    agreement: false,
  };

  isSuccess: boolean = false;

  post = {
    endPoint: 'https://stanislav-levin.de/sendMail.php',
    body: (payload: any) => JSON.stringify(payload),
    options: {
      headers: { 'Content-Type': 'application/json' },
      responseType: 'json' as const,
    },
  };

  translations = {
    header: {
      de: 'Lass uns was Cooles zusammen bauen',
      en: "Let's build something awesome together",
      ru: '–î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º —á—Ç–æ-—Ç–æ –∫—Ä—É—Ç–æ–µ –≤–º–µ—Å—Ç–µ',
    },
    subheader: {
      de: 'Hast du ein Problem zu l√∂sen?',
      en: 'Do you have a problem to solve?',
      ru: '–£ —Ç–µ–±—è –µ—Å—Ç—å –∑–∞–¥–∞—á–∞, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —Ä–µ—à–∏—Ç—å?',
    },
    description: {
      de: 'Ich unterst√ºtze Unternehmen in der Metall- und Fertigungsindustrie dabei, Prozesse zu automatisieren und den Schritt in Richtung Industrie 4.0 zu gehen.',
      en: 'I help companies in the metal and manufacturing industry automate processes and move toward Industry 4.0.',
      ru: '–Ø –ø–æ–º–æ–≥–∞—é –∫–æ–º–ø–∞–Ω–∏—è–º –≤ –æ–±–ª–∞—Å—Ç–∏ –º–µ—Ç–∞–ª–ª–æ–æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã –∏ —Å–¥–µ–ª–∞—Ç—å —à–∞–≥ –∫ –ò–Ω–¥—É—Å—Ç—Ä–∏–∏ 4.0.',
    },
    labels: {
      name: {
        de: 'Wie ist dein Name?',
        en: 'What is your name?',
        ru: '–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?',
      },
      email: {
        de: 'Wie ist deine E-Mail?',
        en: 'What is your email?',
        ru: '–ö–∞–∫–æ–π —É —Ç–µ–±—è –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã?',
      },
      message: {
        de: 'Wie kann ich dir helfen?',
        en: 'How can I help you?',
        ru: '–ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å?',
      },
    },
    placeholders: {
      name: {
        de: 'Dein Name kommt hier hin',
        en: 'Your name goes here',
        ru: '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è',
      },
      email: {
        de: 'deine-Email@email.com',
        en: 'your-email@email.com',
        ru: '–≤–∞—à-email@email.com',
      },
      message: {
        de: 'Hallo Stanislav, mich interessiert...',
        en: 'Hi Stanislav, I‚Äôm interested in...',
        ru: '–ü—Ä–∏–≤–µ—Ç, –°—Ç–∞–Ω–∏—Å–ª–∞–≤! –ú–µ–Ω—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç...',
      },
    },
    errorPlaceholders: {
      name: {
        de: 'Bitte trage einen Namen ein',
        en: 'Please enter your name',
        ru: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è',
      },
      email: {
        de: 'Bitte trage eine E-Mail-Adresse ein',
        en: 'Please enter a valid email address',
        ru: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã',
      },
      message: {
        de: 'Schreibe eine Nachricht (min. 4 Zeichen)',
        en: 'Write a message (min. 4 characters)',
        ru: '–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–º–∏–Ω. 4 —Å–∏–º–≤–æ–ª–∞)',
      },
    },
    checkbox: {
      de: 'Ich habe die Datenschutzerkl√§rung gelesen und bin mit der Verarbeitung meiner Daten einverstanden.',
      en: 'I have read the privacy policy and agree to the processing of my data.',
      ru: '–Ø –ø—Ä–æ—á–∏—Ç–∞–ª(–∞) –ø–æ–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ —Å–æ–≥–ª–∞—Å–µ–Ω(–Ω–∞) –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –º–æ–∏—Ö –¥–∞–Ω–Ω—ã—Ö.',
    },
    submit: {
      de: 'Nachricht senden',
      en: 'Send Message',
      ru: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ',
    },
  };

  constructor(
    private langService: LanguageService,
    private cdr: ChangeDetectorRef,
    private zone: NgZone
  ) { }

  ngOnInit() {
    this.langService.lang$.subscribe((lang) => {
      this.zone.runOutsideAngular(() => {
        this.currentLang = lang;
        queueMicrotask(() => this.zone.run(() => this.cdr.detectChanges()));
      });
    });
  }

  onSubmit(ngForm: NgForm) {
    if (ngForm.submitted && ngForm.form.valid) {
      this.http
        .post(this.post.endPoint, this.post.body(this.contactData), this.post.options)
        .subscribe({
          next: (response: any) => {
            console.log('‚úÖ Response:', response);
            this.isSuccess = true;

            setTimeout(() => (this.isSuccess = false), 4000);

            ngForm.resetForm({
              name: '',
              email: '',
              message: '',
              agreement: false,
            });
          },
          error: (error: any) => {
            console.error('‚ùå Error:', error);
            this.isSuccess = false;
          },
          complete: () => console.info('üì¨ send post complete'),
        });
    }
  }

  get isFormAlmostValid(): boolean {
    const name = this.contactData.name ?? '';
    const email = this.contactData.email ?? '';
    const message = this.contactData.message ?? '';
    const agreement = !!this.contactData.agreement;

    return (
      name.trim().length > 1 &&
      /^[A-Za-z√Ä-≈æ\- ]{2,}$/.test(name) &&
      /[a-zA-Z0-9._%+\-]+@[a-zA-Z0-9.\-]+\.[a-zA-Z]{2,}/.test(email) &&
      message.trim().length >= 4 &&
      !agreement
    );
  }

  get checkboxHint(): string {
    switch (this.currentLang) {
      case 'de':
        return 'Bitte best√§tige die Datenschutzerkl√§rung.';
      case 'en':
        return 'Please confirm the privacy policy.';
      case 'ru':
        return '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.';
      default:
        return 'Bitte best√§tige die Datenschutzerkl√§rung.';
    }
  }

  get successHint(): string {
    switch (this.currentLang) {
      case 'de':
        return 'Nachricht erfolgreich gesendet!';
      case 'en':
        return 'Message sent successfully!';
      case 'ru':
        return '–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!';
      default:
        return 'Nachricht erfolgreich gesendet!';
    }
  }
}
